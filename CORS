What is CORS (cross-origin resource sharing)?
Cross-origin resource sharing (CORS) is a browser mechanism which enables controlled
access to resources located outside of a given domain. It extends and adds flexibility
to the same-origin policy (SOP). However, it also provides potential for cross-domain attacks,
if a website's CORS policy is poorly configured and implemented. CORS is not a protection against cross-origin attacks such as cross-site request forgery (CSRF).


Same-origin policy
The same-origin policy is a restrictive cross-origin specification that limits the ability
for a website to interact with resources outside of the source domain. The same-origin policy
was defined many years ago in response to potentially malicious cross-domain interactions,
such as one website stealing private data from another. It generally allows a domain to issue requests to other domains, but not to access the responses.


Relaxation of the same-origin policy
The same-origin policy is very restrictive and consequently various approaches have been devised to circumvent the constraints.
Many websites interact with subdomains or third-party sites in a way that requires full cross-origin access.
A controlled relaxation of the same-origin policy is possible using cross-origin resource sharing (CORS).

The cross-origin resource sharing protocol uses a suite of HTTP headers that define trusted web origins
and associated properties such as whether authenticated access is permitted. These are combined in a header
exchange between a browser and the cross-origin web site that it is trying to access.

Vulnerabilities arising from CORS configuration issues
Many modern websites use CORS to allow access from subdomains and trusted third parties. 
Their implementation of CORS may contain mistakes or be overly lenient to ensure that everything works, and this can result in exploitable vulnerabilities.

Breaking TLS with poorly configured CORS
Suppose an application that rigorously employs HTTPS also whitelists a trusted subdomain that is using plain HTTP. For example, when the application receives the following request:

GET /api/requestApiKey HTTP/1.1
Host: vulnerable-website.com
Origin: http://trusted-subdomain.vulnerable-website.com
Cookie: sessionid=...
The application responds with:

HTTP/1.1 200 OK
Access-Control-Allow-Origin: http://trusted-subdomain.vulnerable-website.com
Access-Control-Allow-Credentials: true



How to prevent CORS-based attacks
CORS vulnerabilities arise primarily as misconfigurations. Prevention is therefore a configuration problem. 
The following sections describe some effective defenses against CORS attacks:

Proper configuration of cross-origin requests
If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header.

Only allow trusted sites
It may seem obvious but origins specified in the Access-Control-Allow-Origin header should only be sites that are trusted. In particular,
dynamically reflecting origins from cross-origin requests without validation is readily exploitable and should be avoided.

Avoid whitelisting null
Avoid using the header Access-Control-Allow-Origin: null. 
Cross-origin resource calls from internal documents and sandboxed requests can specify the null origin.
CORS headers should be properly defined in respect of trusted origins for private and public servers.
