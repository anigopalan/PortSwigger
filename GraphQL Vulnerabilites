To test a graphQL vulnerability, you have to find its endpoint. GraphQL APIs all use the same endpoint. 

If you send query{__typename} to any GraphQL endpoint, it will include the string {"data": {"__typename": "query"}} somewhere in its response. 
This is known as a universal query, and is a useful tool in probing whether a URL corresponds to a GraphQL service.

The query works because every GraphQL endpoint has a reserved field called __typename that returns the queried object's type as a string.

GraphQL supports introspection, which allows clients to query the schema itself. 
Attackers can use introspection queries to enumerate all types, fields, and operations available in the API, gaining valuable information about the system.

Risk: If introspection is enabled in production, attackers can gather a detailed map of the API and use it to craft more targeted attacks.

Mitigation:

Disable introspection in production environments.
Use schema whitelisting to expose only the necessary parts of the API.

GraphQL services often use similar endpoint suffixes. When testing for GraphQL endpoints, you should look to send universal queries to the following locations:

/graphql
/api
/api/graphql
/graphql/api
/graphql/graphql

If these common endpoints don't return a GraphQL response, you could also try appending /v1 to the path.

It is best practice for production GraphQL endpoints to only accept POST requests that have a content-type of application/json,
as this helps to protect against CSRF vulnerabilities. However, some endpoints may accept alternative methods, such as GET requests or POST requests that use a content-type of x-www-form-urlencoded.

If you can't find the GraphQL endpoint by sending POST requests to common endpoints, try resending the universal query using alternative HTTP methods.

If the API uses arguments to access objects directly, it may be vulnerable to access control vulnerabilities. 
A user could potentially access information they should not have simply by supplying an argument that corresponds to that information.
This is sometimes known as an insecure direct object reference (IDOR).

Discovering schema information
The next step in testing the API is to piece together information about the underlying schema.

The best way to do this is to use introspection queries. Introspection is a built-in GraphQL function that enables you to query a server for information about the schema.

Introspection helps you to understand how you can interact with a GraphQL API. It can also disclose potentially sensitive data, such as description fields.

To use introspection to discover schema information, query the __schema field. This field is available on the root type of all queries.

Like regular queries, you can specify the fields and structure of the response you want to be returned when running an introspection query. 
For example, you might want the response to contain only the names of available mutations.

Suggestions are a feature of the Apollo GraphQL platform in which the server can suggest query amendments in error messages. 
These are generally used where a query is slightly incorrect but still recognizable (for example, There is no entry for 'productInfo'. Did you mean 'productInformation' instead?).

Clairvoyance is a tool that uses suggestions to automatically recover all or part of a GraphQL schema, even when introspection is disabled. 
This makes it significantly less time consuming to piece together information from suggestion responses.

If you cannot get introspection queries to run for the API you are testing, try inserting a special character after the __schema keyword.

When developers disable introspection, they could use a regex to exclude the __schema keyword in queries. 
You should try characters like spaces, new lines and commas, as they are ignored by GraphQL but not by flawed regex.

As such, if the developer has only excluded __schema{, then the below introspection query would not be excluded.

Ordinarily, GraphQL objects can't contain multiple properties with the same name. Aliases enable you to bypass this restriction by explicitly naming the properties you want the API to return. 
You can use aliases to return multiple instances of the same type of object in one request.

While aliases are intended to limit the number of API calls you need to make, they can also be used to brute force a GraphQL endpoint.

Many endpoints will have some sort of rate limiter in place to prevent brute force attacks. 
Some rate limiters work based on the number of HTTP requests received rather than the number of operations performed on the endpoint.
Because aliases effectively enable you to send multiple queries in a single HTTP message, they can bypass this restriction.

CSRF vulnerabilities can arise where a GraphQL endpoint does not validate the content type of the requests sent to it and no CSRF tokens are implemented.

POST requests that use a content type of application/json are secure against forgery as long as the content type is validated.
In this case, an attacker wouldn't be able to make the victim's browser send this request even if the victim were to visit a malicious site.

However, alternative methods such as GET, or any request that has a content type of x-www-form-urlencoded,
can be sent by a browser and so may leave users vulnerable to attack if the endpoint accepts these requests.
Where this is the case, attackers may be able to craft exploits to send malicious requests to the API.

To prevent many common GraphQL attacks, take the following steps when you deploy your API to production:

If your API is not intended for use by the general public, disable introspection on it. 
This makes it harder for an attacker to gain information about how the API works, and reduces the risk of unwanted information disclosure.

For information on how to disable introspection in the Apollo GraphQL platform, see this blog post.

If your API is intended for use by the general public then you will likely need to leave introspection enabled. 
However, you should review the API's schema to make sure that it does not expose unintended fields to the public.

Make sure that suggestions are disabled. This prevents attackers from being able to use Clairvoyance or similar tools to glean information about the underlying schema.

You cannot disable suggestions directly in Apollo. See this GitHub thread for a workaround.

Make sure that your API's schema does not expose any private user fields, such as email addresses or user IDs.

Limit the query depth of your API's queries. The term "query depth" refers to the number of levels of nesting within a query. 
Heavily-nested queries can have significant performance implications, and can potentially provide an opportunity for DoS attacks if they are accepted. 
By limiting the query depth your API accepts, you can reduce the chances of this happening.

Configure operation limits. Operation limits enable you to configure the maximum number of unique fields, aliases, and root fields that your API can accept.

Configure the maximum amount of bytes a query can contain.

Consider implementing cost analysis on your API. Cost analysis is a process whereby a library application identifies the resource cost associated with running queries as they are received.
If a query would be too computationally complex to run, the API drops it.

To defend against GraphQL CSRF vulnerabilities specifically, make sure of the following when designing your API:

Your API only accepts queries over JSON-encoded POST.

The API validates that content provided matches the supplied content type.

The API has a secure CSRF token mechanism.

